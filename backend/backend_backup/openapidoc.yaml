openapi: 3.0.0
info:
  version: 0.0.1
  title: Places server API
  description: Simple REST API showing favorite places of users
  contact:
    name: John Doe
    email: john.doe@dontuse.com
servers:
  - url: https://jyri.northeurope.cloudapp.azure.com/api
    description: Production server
  - url: http://localhost:3001/api
    description: Test server running locally
security:
  - bearerAuth: [] 
paths:
  /places:
    get:
      tags:
      - places
      operationId: allPlaces
      summary: List all places
      description: Returns a list of all favorite places of users.
      responses:
        '200':
          description: Names of favorite places
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/places"
    post:
      summary: Adds logged in users favorite place
      tags: 
        - places
      operationId: addPlace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: Id of the logged in user - Id of the test user E is 38)
                  example: 38 
                name:
                  type: string
                  description: Name of the favorite place
                  example: "Radu's restaurant"
                lat:
                  type: number
                  description: Latitude of the place
                  example: 62.001
                lon:
                  type: number
                  description: Lognitude of the place
                  example: 29.111
      responses:
        201:
          description: A new place has been succesfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/places'                                  
  /places/{placeID}:
    get:
      tags:
      - places
      operationId: getPlaces
      summary: Fetch all favorite places
      description: Get the data relating to certain favorite place
      parameters:
      - name: placeId
        in: path
        required: true
        schema:
          type: number
          example: 2
      responses:
        '200':
          description: Places list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/places"
  /users:
    get:
      operationId: getAllUsers
      summary: List all users
      tags:
      - users
      description: Returns the list of all users of favorite places app.
      responses:
        '200':
          description: Names of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/users"
  /users/{userID}:
    get:
      operationId: getUser
      summary: Fetch the user of favorite places app
      tags:
      - users
      description: Returns the data relating to certain user of favorite places app
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: number
          example: 1
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"    
        '404':
          description: Something went bad
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    places:
      type: object
      properties:
        ID:
          type: number                   
        Name:
          type: string
          description: Name of the favorite place
          example: "favorite Place"
        UserID:
          type: number
          description: Identifies the user
          example: 1
        Latitude:
          type: number
          description: Latitude of the place
          example: 62.001
        Lognitude:
          type: number
          description: Lognitude of the place
          example: 29.111
    users:
      type: object
      properties:
        ID:
          type: number
        Name:
          type: string
          description: Name of the registered users
          example: Radu
        Password:
          type: string
          description: Hashed password of the user
          example: $2b$10$Td7EwsHrdB/UV1OslDm/kOZMxJ/t3tHrKM2NxpnhozBtK1Losbk.9
    error:
      type: object
      properties:
        text:
          type: string
          description: The error description
          example: Unknown column a in where clause
        sql:
          type: string
          description: Origin of SQL error
          example: SELECT * FROM places WHERE ID=x"
        fatal:
          type: boolean
          description: A boolean value indicating whether the connection remains valid
          example: false
        errno:
          type: number
          description: The rrror number
          example: 1000
        sqlState:
          type: number
          description: The SQL state code
          example: 40000
        code:
          type: string
          description: The error code
          example: ER_BAD_FIELD_ERROR